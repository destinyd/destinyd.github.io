<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coffeescript | DestinyD's Blog]]></title>
  <link href="http://destinyd.me/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://destinyd.me/"/>
  <updated>2014-09-13T09:18:27+00:00</updated>
  <id>http://destinyd.me/</id>
  <author>
    <name><![CDATA[DestinyD]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何在coffeescript的class中构建可回调的函数]]></title>
    <link href="http://destinyd.me/2014-07-27-ru-he-zai-coffee-script-de-class-zhong-gou-jian-ke-hui-diao-de-han-shu/"/>
    <updated>2014-07-27T09:24:36+00:00</updated>
    <id>http://destinyd.me/ru-he-zai-coffee-script-de-class-zhong-gou-jian-ke-hui-diao-de-han-shu</id>
    <content type="html"><![CDATA[<p>coffeescript想必大家都知道在很多时候并不是想象中的那么好用，例如：
<code>
class A
  constructor: (options) -&gt;
    @tmp = 1
    $('.string').click @func
  func: -&gt;
    console.log @tmp # undefined
</code></p>

<h3>看提示或者自己测试你会发现alert的结果是<strong>undefined</strong>，为什么会这样呢？</h3>

<p>因为@其实代替的是<strong>this.</strong>。
了解jquery的应该知道而，在func中的this其实是<strong>$(&lsquo;#a&rsquo;)</strong>。</p>

<p>大家可以在func中添加
<code>
console.log @
console.log this
</code>
查看this是到底是什么。（@和this其实是相同的）</p>

<h3>那么我们怎么才能在func中调用到class A中的其他变量或者函数呢？</h3>

<p>coffeescript提供了<strong>=></strong>即闭包符号，我们试试看改成=>看看会是什么效果
<code>
class A
  constructor: (options) -&gt;
    @tmp = 1
    $('.string').click @func
  func: =&gt;
    console.log @tmp # 1
</code>
这是大家想要的结果了。</p>

<h3>那么嵌套呢？</h3>

<pre><code>class A
  constructor: (options) -&gt;
    @tmp1 = 1
    @tmp2 = 1
    $('.string').click @build
  build: =&gt;
    console.log @tmp1 # 1
    $('.string').click @func
  func: =&gt;
    console.log @tmp2 # 2
</code></pre>

<p>实测也是可行的</p>

<h3>还有没有更复杂的情况？</h3>

<p>的确是有的，不可能任何时候你都使用<strong>=></strong>，但是此时我们又想他能调用class内的函数怎么办？
<code>
class B
  constructor:
    @tmp = 1
    $('#modal').on 'shown.bs.modal', (e) =&gt; @build(e)
  build: -&gt;
    console.log @tmp # 1
</code>
通过<strong>(e) => @build(e)</strong>即可达到在<strong>build函数</strong>闭包的效果。</p>
]]></content>
  </entry>
  
</feed>
