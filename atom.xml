<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DestinyD's Blog]]></title>
  <link href="http://destinyd.me/atom.xml" rel="self"/>
  <link href="http://destinyd.me/"/>
  <updated>2014-08-25T17:24:55+00:00</updated>
  <id>http://destinyd.me/</id>
  <author>
    <name><![CDATA[DestinyD]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[打开 Android 模拟器底部虚拟按键]]></title>
    <link href="http://destinyd.me/2014-08-25-da-kai-android-mo-ni-qi-di-bu-xu-ni-an-jian/"/>
    <updated>2014-08-25T17:06:50+00:00</updated>
    <id>http://destinyd.me/da-kai-android-mo-ni-qi-di-bu-xu-ni-an-jian</id>
    <content type="html"><![CDATA[<p>项目开发遇见了一个只有底部有虚拟按钮的机器才会出现的BUG，准备在模拟器里面进行测试。</p>

<h3>问题是怎么在虚拟机里面打开 android 模拟器底部虚拟按键？</h3>

<p>其实也是挺容易的。</p>

<p>我们都知道虚拟机设置里面可以设置skin也就是皮肤，里面有不少选项，但是主要分为两类：</p>

<ul>
<li>带虚拟键盘的</li>
<li>带底部虚拟按键的</li>
</ul>


<p>经测试，只有WXGA、WSVGA（横屏）2类为带底部虚拟按键的，其余均为带虚拟键盘。</p>

<p>或许以后还会有更多种选择吧，这个就需要看大家的创意了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven 给 Android 应用打包，因为调用本地 Jar，运行不成功的解决方案]]></title>
    <link href="http://destinyd.me/2014-08-08-maven-gei-android-ying-yong-da-bao-yin-wei-diao-yong-ben-di-jar-yun-xing-bu-cheng-gong-de-jie-jue-fang-an/"/>
    <updated>2014-08-08T19:44:15+00:00</updated>
    <id>http://destinyd.me/maven-gei-android-ying-yong-da-bao-yin-wei-diao-yong-ben-di-jar-yun-xing-bu-cheng-gong-de-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<p>做过实际应用发布的人都知道，会应用到很多类似与umeng、友推等第三方库，一般都是jar格式的。</p>

<p>本人做开发，觉得maven用的很爽，所以就一直再没建过adt形式的应用工程。</p>

<p>但是现在发布的时候遇到了问题，apk使用IDE运行的时候正常，但是用maven打包的apk，不能正常运行，提示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java.lang.NoClassDefFoundError: cn.bidaround.youtui_template.YtTemplate</span></code></pre></td></tr></table></div></figure>


<p>看提示肯定是打包时候友推的template这个jar没有引入</p>

<p>maven依赖代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>  &lt;groupId&gt;youtui&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;template&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;1.0&lt;/version&gt;
</span><span class='line'>  &lt;scope&gt;system&lt;/scope&gt;
</span><span class='line'>  &lt;systemPath&gt;${project.basedir}/libs/youtui-template.jar&lt;/systemPath&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<p>直接用这个错误搜索不到结果，看来用了友推的不是maven工程？（瞬间觉得高大上）还是友推还小众？（难道我选择有误？）</p>

<p>搜索了一下有关system scope的依赖，发现了解决方法</p>

<h3>首先，我们需要把jar安装至本地maven库</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn install:install-file -Dfile=app/libs/youtui-template.jar -DgroupId=youtui -DartifactId=template -Dversion=1.0 -Dpackaging=jar</span></code></pre></td></tr></table></div></figure>


<h3>然后，我们得把scope改成compile，并去除systemPath</h3>

<p>修改结果如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>    &lt;groupId&gt;youtui&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;template&lt;/artifactId&gt;
</span><span class='line'>    &lt;scope&gt;compile&lt;/scope&gt;
</span><span class='line'>    &lt;version&gt;1.0&lt;/version&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<h3>最后重新打包测试</h3>

<p>模拟器运行后，错误没有再次出现！</p>

<h3>后话</h3>

<p>很多人现在都开始使用Android Studio、Intellij Idea等开发工具，而不是单纯的使用ADT。</p>

<p>Maven、Gradle等东西不断的被引入，Gradle不是不喜欢，而是2.0至今在各IDE都未能很好的整合，让我很是不爽，而且Gradle也依赖于Maven，所以使用Maven是我的选择。</p>

<p>如果有哪位喜欢Maven的，请留言，看情况和是，我不断的放出Maven的教程，帮助各位更好、更快的学习。</p>

<p>顺便发个新应用的网站链接《<a href="http://joke.realityandapp.com">笑料百出</a>》，希望大家多多支持！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在coffeescript的class中构建可回调的函数]]></title>
    <link href="http://destinyd.me/2014-07-27-ru-he-zai-coffee-script-de-class-zhong-gou-jian-ke-hui-diao-de-han-shu/"/>
    <updated>2014-07-27T09:24:36+00:00</updated>
    <id>http://destinyd.me/ru-he-zai-coffee-script-de-class-zhong-gou-jian-ke-hui-diao-de-han-shu</id>
    <content type="html"><![CDATA[<p>coffeescript想必大家都知道在很多时候并不是想象中的那么好用，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class A
</span><span class='line'>  constructor: (options) -&gt;
</span><span class='line'>    @tmp = 1
</span><span class='line'>    $('.string').click @func
</span><span class='line'>  func: -&gt;
</span><span class='line'>    console.log @tmp # undefined</span></code></pre></td></tr></table></div></figure>


<h3>看提示或者自己测试你会发现alert的结果是<strong>undefined</strong>，为什么会这样呢？</h3>

<p>因为@其实代替的是<strong>this.</strong>。
了解jquery的应该知道而，在func中的this其实是<strong>$(&lsquo;#a&rsquo;)</strong>。</p>

<p>大家可以在func中添加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>console.log @
</span><span class='line'>console.log this</span></code></pre></td></tr></table></div></figure>


<p>查看this是到底是什么。（@和this其实是相同的）</p>

<h3>那么我们怎么才能在func中调用到class A中的其他变量或者函数呢？</h3>

<p>coffeescript提供了<strong>=></strong>即闭包符号，我们试试看改成=>看看会是什么效果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class A
</span><span class='line'>  constructor: (options) -&gt;
</span><span class='line'>    @tmp = 1
</span><span class='line'>    $('.string').click @func
</span><span class='line'>  func: =&gt;
</span><span class='line'>    console.log @tmp # 1</span></code></pre></td></tr></table></div></figure>


<p>这是大家想要的结果了。</p>

<h3>那么嵌套呢？</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class A
</span><span class='line'>  constructor: (options) -&gt;
</span><span class='line'>    @tmp1 = 1
</span><span class='line'>    @tmp2 = 1
</span><span class='line'>    $('.string').click @build
</span><span class='line'>  build: =&gt;
</span><span class='line'>    console.log @tmp1 # 1
</span><span class='line'>    $('.string').click @func
</span><span class='line'>  func: =&gt;
</span><span class='line'>    console.log @tmp2 # 2</span></code></pre></td></tr></table></div></figure>


<p>实测也是可行的</p>

<h3>还有没有更复杂的情况？</h3>

<p>的确是有的，不可能任何时候你都使用<strong>=></strong>，但是此时我们又想他能调用class内的函数怎么办？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class B
</span><span class='line'>  constructor:
</span><span class='line'>    @tmp = 1
</span><span class='line'>    $('#modal').on 'shown.bs.modal', (e) =&gt; @build(e)
</span><span class='line'>  build: -&gt;
</span><span class='line'>    console.log @tmp # 1</span></code></pre></td></tr></table></div></figure>


<p>通过<strong>(e) => @build(e)</strong>即可达到在<strong>build函数</strong>闭包的效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle 如何引用 Maven 库的项目]]></title>
    <link href="http://destinyd.me/2014-07-22-gradle-ru-he-yin-yong-maven-ku-de-xiang-mu/"/>
    <updated>2014-07-22T15:40:29+00:00</updated>
    <id>http://destinyd.me/gradle-ru-he-yin-yong-maven-ku-de-xiang-mu</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>由于项目模块独立化，部分同事使用的是android studio，即使用gradle管理android项目。</p>

<p>然后组件大多是maven项目，存于maven本地库。</p>

<p>一般引用为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    compile project(':menudrawer')
</span><span class='line'>    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
</span><span class='line'>    compile 'com.android.support:support-v4:19.0.1'
</span><span class='line'>    compile 'com.github.destinyd.kcextraimageview:kcextraimageview:0.1.0'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>前一项为工程内项目，2、3项为经maven中心库项目，第4项为未提交到maven中心库的本地库项目。</p>

<p>测试<a href="https://github.com/destinyd/kcextraimageview"><strong>第4项</strong></a>出错，不管是否已经使用<strong>mvn clean install</strong>安装到本地库。</p>

<h2>解决</h2>

<p>万能的google查询了下解决方法，发现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>    mavenCentral()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>改为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>    mavenLocal()
</span><span class='line'>    mavenCentral()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>即可。</p>

<h2>结论</h2>

<p>gradle项目默认配置文件是不使用maven本地库，如果需要需进行设置。</p>

<h2>组件介绍</h2>

<p><a href="https://github.com/destinyd/kcextraimageview"><strong>Extra Image View</strong></a>是一个集合拖动、双手操作的高级图片组件，有兴趣的可以尝试使用，欢迎各位提供各种意见和建议。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git在remote端清除tag]]></title>
    <link href="http://destinyd.me/2014-07-21-git-zai-remote-duan-qing-chu-tag/"/>
    <updated>2014-07-21T10:53:31+00:00</updated>
    <id>http://destinyd.me/git-zai-remote-duan-qing-chu-tag</id>
    <content type="html"><![CDATA[<p>最新在弄maven的archetypes遇到点问题，使用其插件部署时会生产tag并且自动提交版本库。</p>

<p>但是我忘记使用gpg签名，而我不想手工下载从新签名。</p>

<p>我把之前的提交全部revert了，但是部署的时候提示remote端tag已经存在。</p>

<p>搜索了一下怎么解决这个问题，才发现其实也挺简单的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git tag -d 12345
</span><span class='line'>git push origin :refs/tags/12345</span></code></pre></td></tr></table></div></figure>


<p>也就2句命令而已。</p>

<p>然后我再次revert了已经push的commit，重新部署，一切问题解决。</p>

<p>看来玩好git也是门艺术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git怎么取消已经push了的commit]]></title>
    <link href="http://destinyd.me/2014-07-10-git-zen-me-qu-xiao-yi-jing-push-le-de-commit/"/>
    <updated>2014-07-10T19:10:51+00:00</updated>
    <id>http://destinyd.me/git-zen-me-qu-xiao-yi-jing-push-le-de-commit</id>
    <content type="html"><![CDATA[<p>使用版本管理工具管理项目，可能经常会遇到这些情况：
* 发现某个commit包含了bug，但是已经push到版本库了，想在版本库取消掉它，修改之后重新commit
* 已经上线了的功能想取消掉，这个commit包含了多个commit，均已push到版本库</p>

<p>其实想要恢复还是挺简单的，git提供了一个revert指令，专门用于处理这样的事情。</p>

<h2>取消掉某个commit</h2>

<p>我们只需要执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git revert commit_id</span></code></pre></td></tr></table></div></figure>


<h2>取消掉多个commit</h2>

<p>我们需要倒序的执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git revert commit_id1[ commit_id2 ...]</span></code></pre></td></tr></table></div></figure>


<p>操作起来相对麻烦，类似于<code>git reset HEAD~1 --soft</code>的HEAD~N是否有效本人也没有去证明，如果有需要你们可以自己尝试。</p>

<p><strong>注意：</strong>
<strong>commit_id 可以通过git log查看。</strong></p>

<h2>注意</h2>

<ul>
<li>如果之后有基于此commit做了修改的话，你还需要解决冲突。</li>
<li>此commit不可以再通过merge方式合并，你只能修改后重新</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用octopress搭建blog]]></title>
    <link href="http://destinyd.me/2014-07-09-yong-octopressda-jian-blog/"/>
    <updated>2014-07-09T20:00:16+00:00</updated>
    <id>http://destinyd.me/yong-octopressda-jian-blog</id>
    <content type="html"><![CDATA[<p>octopress是基于jekyll，添加了rake操作的网站框架，使用它可以比jekyll更加容易搭建网站。</p>

<h2>1. 安装ruby</h2>

<p>可以参考 <a href="http://rvm.io">rvm.io</a></p>

<h2>2. 安装octopress</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/imathis/octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h2>3. 创建微博文章、页面</h2>

<p>你可以通过以下指令创建微博文章</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post</span></code></pre></td></tr></table></div></figure>


<p>执行后会提示你输入文章标题，可以为中文。</p>

<p>之后会在<strong>source/_posts</strong>下生成文章文件，改写成你想要的内容，格式为markdown。</p>

<p>你可以通过以下指令创建页面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page[page_file_name]</span></code></pre></td></tr></table></div></figure>


<p>执行后会在source下生成<strong>source/page_file_name/index.markdown</strong>，修改成你想要的页面。</p>

<h2>4. 本地预览</h2>

<p>本地预览其实很简单，执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>会监听4000端口，你可以通过
<a href="http://localhost:4000">http://localhost:4000</a>
访问，预览网站。</p>

<h2>5. 部署</h2>

<h3>5.1 部署到github</h3>

<p>部署到github相对简单的多</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages[repo]</span></code></pre></td></tr></table></div></figure>


<p>将repo改成你的repo地址就ok了，如我的是<a href="https://github.com/destinyd/destinyd.github.io">https://github.com/destinyd/destinyd.github.io</a></p>

<p>然后执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>则会生成最新文章并部署到github，然后可以通过用户名.github.io访问，例如我的为
<a href="http://destinyd.github.io">http://destinyd.github.io</a></p>

<h3>5.2 部署到heroku</h3>

<p>安装heroku工具的步骤就省略了</p>

<p>首先需要创建一个heroku app</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku create</span></code></pre></td></tr></table></div></figure>


<p>然后生成最新的网站内容，并上传到heroku</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>最后打开访问</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku open</span></code></pre></td></tr></table></div></figure>


<p>部署一个blog也不难嘛，对吧！</p>

<h2>其他</h2>

<h3>更改octopress配置</h3>

<p>在<strong>_config.yml</strong>文件中可以看到octopress的各种配置，例如blog名称、下标题、网址、作者名称等，可以更改为你自己的然后从新<strong>rake generate</strong>生成新网站。</p>

<h3>更换博客主题</h3>

<p><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">octopress第三方主题</a>
这上面提供很多用户自制的主题，可以很简单的直接拿来使用，只需要执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone GIT_URL .themes/THEME_NAME
</span><span class='line'>rake install['THEME_NAME']
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<h3>按抓给你第三方插件</h3>

<p><a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">octopress第三方插件</a>
这上面有很多插件可供下载，不过具体操作不一样，所以只提供链接。</p>

<h3>Github Page绑定自己域名</h3>

<p>在项目根目录下建立一文件，名为CNAME，里面写上域名，如destinyd.me 或者在命令行里执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'destinyd.me' &gt;&gt; source/CNAME</span></code></pre></td></tr></table></div></figure>


<p>去自己的域名运营商处修改:
CNAME: destinyd.me => destinyd.github.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用jekyll建造blog并放到github上]]></title>
    <link href="http://destinyd.me/2014-07-08-jekyll-blog-to-github/"/>
    <updated>2014-07-08T10:51:29+00:00</updated>
    <id>http://destinyd.me/jekyll-blog-to-github</id>
    <content type="html"><![CDATA[<p>jekyll是一个轻量级的网站框架，经常被用于建设github上的blog，</p>

<h2>1. 安装ruby</h2>

<p>可以参考 <a href="http://rvm.io">rvm.io</a></p>

<h2>2. 安装jekyll</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install jekyll</span></code></pre></td></tr></table></div></figure>


<p>备注： 国内可能需要更换gem源，否则可能会因为被墙而不能正常安装。<a href="http://ruby.taobao.org">taobao源</a></p>

<h2>3. 创建、并运行blog</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jekyll new blog
</span><span class='line'>cd blog
</span><span class='line'>jekyll serve</span></code></pre></td></tr></table></div></figure>


<p>这时候你可以打开浏览器直接访问
<a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a>
一个简单的blog就建成了</p>

<h2>4. 添加文章</h2>

<p>打开<code>_posts/</code>你会发现有一篇以:year-:month-:day-:title.markdown命名的文章，你可以以此格式复制成你想要的名称，打开修改即可。</p>

<p>文章默认使用markdown格式，你也可以使用textile，这个看个人喜好。</p>

<h2>5. 部署到github</h2>

<p>首先你需要在github创建一个你的名称.github.io的项目（如：我的用户名为destinyd，项目名则为 destinyd.github.io）</p>

<p>以我的blog提交作为范例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jekyll build
</span><span class='line'>cd _site
</span><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m 'first commit'
</span><span class='line'>git remote add origin git@github.com:destinyd/destinyd.github.io.git
</span><span class='line'>git push -u origin master</span></code></pre></td></tr></table></div></figure>


<p>执行完就可以通过
<a href="http://destinyd.github.io">http://destinyd.github.io</a>
访问了</p>
]]></content>
  </entry>
  
</feed>
